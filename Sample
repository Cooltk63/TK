@RequestMapping(value = "/viewReportJrxmlCircle", method = RequestMethod.POST)
    public void viewReportCircle(@RequestBody Map<String, Object> map, HttpServletResponse response)
            throws JRException, ConfigurationException, SQLException, IOException {

        byte[] pdfContent = null;
        LinkedHashMap list = (LinkedHashMap) map.get("user");
        String circleCode = (String) list.get("circleCode");
        String userId = (String) list.get("userId");
        String quarterEndDate = (String) list.get("quarterEndDate");

        LinkedHashMap reportList = (LinkedHashMap) map.get("report");
        String parameters = (String) reportList.get("dash_param");
        String prePost = (String) map.get("prePost");
        String dash_dwnload = (String) map.get("type");
        String downloadType = (String) map.get("dash_dwnload");
        String branchCode = (String) map.get("branchCode");
        List<String> circleList = (List) map.get("compcircle");

       
        String jrxmlName = "";
        // for setting jrxmlName
        if (null != branchCode && branchCode.equalsIgnoreCase("All Branches")) {
            jrxmlName = (String) reportList.get("dash_jrxml");
            branchCode = circleCode;
            // log.info("********************************* Circle jrxml Name " + jrxmlName);

        } else {
            String jrxmlNamecheck = (String) reportList.get("dash_jrxml");
            if (jrxmlNamecheck.equalsIgnoreCase("BS_PNL")) {
                jrxmlName = "BS_PNL_B";
            } else if (jrxmlNamecheck.equalsIgnoreCase("BS_YSA")) {
                jrxmlName = "BS_YSA_B";
            } else {

                jrxmlName = jrxmlNamecheck;
            }

            // log.info("********************************* Branch jrxml Name " + jrxmlName);
        }

        String para[] = null;
        if (parameters != "null") {
            para = parameters.split(",");
        }

        Map param = new HashMap();
        for (String listOfParameters : para) {
            // log.info("parameters" + listOfParameters);

            if (listOfParameters.equalsIgnoreCase("DATE")) {
                param.put(listOfParameters, quarterEndDate);
            }
            if (listOfParameters.equalsIgnoreCase("CIRCLE_CODE")) {
                param.put(listOfParameters, circleCode);
            }

            if (listOfParameters.contains("TYPE")) {
                param.put(listOfParameters, prePost);
            }

            if (listOfParameters.equalsIgnoreCase("COMP")) {
                param.put("COMP", circleList);
            }
            if (listOfParameters.equalsIgnoreCase("BRANCH_CODE")) {
                param.put("BRANCH_CODE", branchCode);
            }

        }
        
        param.put("ZERO", map.get("isSuppresed"));

        Configuration config = new PropertiesConfiguration("common.properties");
        param.put("SUBREPORT_DIR", config.getProperty("REPORT_HOME_DIR") + "jasper" + File.separator);

        Connection con = dataSource.getConnection();

        String checkPath = config.getProperty("REPORT_HOME_DIR") + "created" + File.separator + circleCode
                + File.separator + quarterEndDate.replaceAll("/", "");
        if (null == branchCode) {
            branchCode = "";
        } else {
            branchCode = branchCode + "_";
        }

        try {
            if (dash_dwnload.equalsIgnoreCase("view")) {

                String outFilePath = config.getProperty("REPORT_HOME_DIR") + "created" + File.separator + circleCode
                        + File.separator + quarterEndDate.replaceAll("/", "") + File.separator + branchCode
                        + quarterEndDate.replaceAll("/", "") + "_" + jrxmlName + ".html";

                // log.info("HTML outFilePath outFilePath outFilePath " + outFilePath);
                File check = new File(checkPath);
                if (!check.exists())
                    check.mkdirs();
                JasperPrint jasperPrint;
                String JasperFilePath = config.getProperty("REPORT_HOME_DIR") + "jasper" + File.separator + jrxmlName
                        + ".jasper";

                param.put("IS_IGNORE_PAGINATION", true);
                jasperPrint = JasperFillManager.fillReport(JasperFilePath, param, con);
                // log.info("filled done");
                JasperExportManager.exportReportToHtmlFile(jasperPrint, outFilePath);
                // log.info("export done");

                File file2 = new File(outFilePath);
                pdfContent = FileUtils.readFileToByteArray(file2);
                // FileInputStream stream=new FileInputStream(file2);
                OutputStream os = response.getOutputStream();
                // IOUtils.copy(stream, response.getOutputStream());
                //SCR 2024-25 : Header Manipulation
                String SecuredFileName= SanitizeFile.sanitizeFilename(jrxmlName);
                response.setContentType("text/html");
                response.setHeader("Content-Type", "text/html");
                response.setHeader("Content-Length", String.valueOf(file2.length()));
                response.setHeader("Content-Disposition", "inline; filename=" + "\"" + SecuredFileName + ".html" + "\"");
                os.write(pdfContent);
                os.close();

                // byte[] pdfContent = FileUtils.readFileToByteArray(file2);
                // response.flushBuffer();
                // stream.close();
                file2.delete();
            } else if (dash_dwnload.equalsIgnoreCase("downloadPDF")) {
                
                String outFilePath = config.getProperty("REPORT_HOME_DIR") + "created" + File.separator + circleCode
                        + File.separator + quarterEndDate.replaceAll("/", "") + File.separator + branchCode
                        + quarterEndDate.replaceAll("/", "") + "_" + jrxmlName + ".pdf";

                // log.info("outFilePath outFilePath outFilePath outFilePath " + outFilePath);
                File check = new File(checkPath);
                if (!check.exists())
                    check.mkdirs();
                JasperPrint jasperPrint;
                String JasperFilePath = config.getProperty("REPORT_HOME_DIR") + "jasper" + File.separator + jrxmlName
                        + ".jasper";
                

                jasperPrint = JasperFillManager.fillReport(JasperFilePath, param, con);
                // log.info("filled done");
                JasperExportManager.exportReportToPdfFile(jasperPrint, outFilePath);
                // log.info("export done");

                File file2 = new File(outFilePath);
                pdfContent = FileUtils.readFileToByteArray(file2);
                // FileInputStream stream=new FileInputStream(file2);
                OutputStream os = response.getOutputStream();
                // IOUtils.copy(stream, response.getOutputStream());
                //SCR 2024-25 : Header Manipulation
                String SecuredFileName= SanitizeFile.sanitizeFilename(jrxmlName);
                response.setContentType("application/pdf");
                response.setHeader("Content-Disposition", "attachment: filename=" + SecuredFileName + ".pdf");
                os.write(pdfContent);
                os.close();
                
                file2.delete();
            } else if (dash_dwnload.contains("downloadCSV")) {
                // log.info("in my csv format-------------------");
                String outFilePath = config.getProperty("REPORT_HOME_DIR") + "created" + File.separator + circleCode
                        + "_" + quarterEndDate.replaceAll("/", "") + "_" + jrxmlName + ".csv";
                // log.info("output file path : " + outFilePath);
                ////log.info("Source file path : " + sourceFilePath);

                JasperReport jasperReport;
                JasperPrint jasperPrint;

                File check = new File(checkPath);
                if (!check.exists())
                    check.mkdirs();
                String JasperFilePath = config.getProperty("REPORT_HOME_DIR") + "jasper" + File.separator + jrxmlName
                        + ".jasper";

               

                jasperPrint = JasperFillManager.fillReport(JasperFilePath, param, con);

                OutputStream out2 = new FileOutputStream(new File(outFilePath));
                JRCsvExporter CSV = new JRCsvExporter();
                // CSV.setParameter(JRTextExporterParameter.PAGE_WIDTH, 150);
                // CSV.setParameter(JRTextExporterParameter.PAGE_HEIGHT, 40);
                CSV.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                CSV.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFilePath);
                CSV.exportReport();

                // SCR 2024-25 : Formula Injection

                // List to hold the sanitized lines of the CSV file
                List<String> safeLines = new ArrayList<>();

                // Reading the original CSV file line-by-line
                try (BufferedReader reader = new BufferedReader(new FileReader(outFilePath))) {
                    String line;
                    // Loop through each line of the CSV
                    while ((line = reader.readLine()) != null) {

                        // Split each line into individual cells by comma (CSV format)
                        // The -1 ensures trailing empty cells are included
                        String[] cells = line.split(",", -1);

                        // Loop through each cell in the line
                        for (int i = 0; i < cells.length; i++) {
                            String cell = cells[i].trim(); // Remove leading/trailing spaces

                            // Check if cell starts with a dangerous formula-triggering character
                            if (!cell.isEmpty() && (cell.startsWith("=") || cell.startsWith("+") || cell.startsWith("-") || cell.startsWith("@"))) {
                                // Add a single quote before the cell content to neutralize it
                                cells[i] = "'" + cell;
                            }
                        }

                        // Join the cells back into a sanitized CSV line
                        safeLines.add(String.join(",", cells));
                    }
                }

                // Now write the sanitized content back to the same CSV file
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(outFilePath))) {
                    for (String safeLine : safeLines) {
                        writer.write(safeLine);  // Write the cleaned line
                        writer.newLine();        // Move to the next line
                    }
                }
                adminService.insertCSVInfo(circleCode, userId, quarterEndDate);

            } else {

                // adding these parameters to make amounts as numeric in Excel format
                param.put("isExcel", true);
                param.put("IS_DETECT_CELL_TYPE", true);
                String outFilePath = config.getProperty("REPORT_HOME_DIR") + "created" + File.separator + branchCode
                        + quarterEndDate.replaceAll("/", "") + "_" + jrxmlName + ".xlsx";
               
                JasperReport jasperReport;
                JasperPrint jasperPrint;

                File check = new File(checkPath);
                if (!check.exists())
                    check.mkdirs();
                String JasperFilePath = config.getProperty("REPORT_HOME_DIR") + "jasper" + File.separator + jrxmlName
                        + ".jasper";

                param.put("IS_IGNORE_PAGINATION", true);
                jasperPrint = JasperFillManager.fillReport(JasperFilePath, param, con);
               
                OutputStream out2 = new FileOutputStream(new File(outFilePath));

                JRXlsxExporter excelExporter = new JRXlsxExporter();
                
              
                excelExporter.setExporterInput(new SimpleExporterInput(jasperPrint));
                excelExporter.setExporterOutput(new SimpleOutputStreamExporterOutput(out2));
                SimpleXlsxReportConfiguration configuration = new SimpleXlsxReportConfiguration();
                // configuration.setOnePagePerSheet(true);
                configuration.setDetectCellType(true);
                configuration.setWhitePageBackground(false);
                configuration.setRemoveEmptySpaceBetweenRows(true);
                configuration.setIgnoreCellBorder(true);
                excelExporter.setConfiguration(configuration);

                excelExporter.exportReport();

                File file2 = new File(outFilePath);
                pdfContent = FileUtils.readFileToByteArray(file2);
            }

        } catch (RuntimeException e) {
            // log.info("in catch.....");
            log.error("Exception Occurred " +e.getMessage());
        } finally {
            // log.info("in finally.....");
            if (null != con) {
                // log.info("connection is not null...");
                con.close();
            }
        }
    }
