
const passphrase = "juVI+XqX90tQSqYPAmtVxg==";

async function encryptData(iv, salt, passphrase, data) {
  const encoder = new TextEncoder();
  const passphraseBuffer = encoder.encode(passphrase);
  const keyMaterial = await crypto.subtle.importKey(
    "raw",
    passphraseBuffer,
    { name: "PBKDF2" },
    false,
    ["deriveKey"]
  );

  const derivedKey = await crypto.subtle.deriveKey(
    {
      name: "PBKDF2",
      salt: salt, //crypto.getRandomValues(new Uint8Array(16)),
      iterations: 1000,
      hash: "SHA-256",
    },
    keyMaterial,
    {
      name: "AES-GCM",
      length: 256,
    },
    true,
    ["encrypt", "decrypt"]
  );
  const encodedData = new TextEncoder().encode(data);
  const encryptedData = await crypto.subtle.encrypt(
    { name: "AES-GCM", iv },
    derivedKey,
    encodedData
  );

  return { iv, salt, encryptedData };
}

function encrypt(iv, salt, data) {
    return encryptData(iv, salt, passphrase, data)
        .then(value => {
            return btoa(String.fromCharCode.apply(null, new Uint8Array(value.encryptedData)));
        })
        .catch((e) => {
            console.error(e);
        });
}

export {encrypt}
