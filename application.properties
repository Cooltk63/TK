spring.application.name=api-gateway
server.port=8080

spring.profiles.active=dev

# App
spring.application.name=api-gateway
server.port=8080
spring.profiles.active=dev

# ====== ROUTING (dynamic) ======
# Comma-separated list of logical service names you want to expose via gateway:
gateway.services=orders,products,users
# Default port for local dev targets:
gateway.service.default-port=8081
# (In Kubernetes, you’ll use http://<svc-name>:<port> automatically — see route config)

# ====== SECURITY (JWT) ======
# We'll validate HS256 tokens (symmetric secret) locally at the gateway
security.jwt.mode=hmac
# >= 32 bytes base64-encoded secret (don’t commit real prod secret):
security.jwt.secret=ZjZjY2YxN2Q4M2U5M2YxY2I5M2Y2ZGE0ZmQzY2U2YmE1NTYzNzY3ODkwMDEyMw==

# Optional: token validity used by the demo /auth/login (seconds)
security.jwt.expire-seconds=900

# ====== BYPASS vs PROTECTED ======
# Paths here will NOT require JWT (comma-separated, ant-style patterns):
gateway.bypass.urls=/auth/**,/public/**,/actuator/**

# ====== CORS ======
gateway.cors.allowed-origins=http://localhost:3000
gateway.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
gateway.cors.allowed-headers=*

# ====== REDIS ======
redis.enabled=true
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.password=
# If you don’t run Redis locally:
# redis.enabled=false

# Actuator
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=health,info
